#!/bin/bash

# Script de validaci√≥n de Terraform para Jenkins Agent
# Basado en el repositorio de MovieSphere

set -e

echo "üîç Iniciando validaci√≥n de Terraform..."

# Variables
TERRAFORM_DIR="Terraform"
ENVIRONMENT=${1:-"develop"}
CHECKOV_CONFIG=".checkov.yml"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Funci√≥n para logging
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar herramientas
check_tools() {
    log_info "Verificando herramientas instaladas..."
    
    if ! command -v terraform &> /dev/null; then
        log_error "Terraform no est√° instalado"
        exit 1
    fi
    
    if ! command -v checkov &> /dev/null; then
        log_error "Checkov no est√° instalado"
        exit 1
    fi
    
    log_info "‚úÖ Herramientas verificadas"
    log_info "Terraform version: $(terraform version)"
    log_info "Checkov version: $(checkov --version)"
}

# 1. Terraform Format
terraform_format() {
    log_info "üîß Verificando formato de Terraform..."
    cd $TERRAFORM_DIR
    
    if terraform fmt -check -recursive; then
        log_info "‚úÖ Formato de Terraform correcto"
    else
        log_error "‚ùå Formato de Terraform incorrecto"
        log_info "Aplicando formato autom√°ticamente..."
        terraform fmt -recursive
        exit 1
    fi
}

# 2. Terraform Validate
terraform_validate() {
    log_info "‚úÖ Ejecutando terraform validate..."
    cd $TERRAFORM_DIR
    
    for env in environments/*; do
        if [ -d "$env" ]; then
            env_name=$(basename "$env")
            log_info "Validando ambiente: $env_name"
            
            cd "$env"
            if terraform init -backend=false; then
                if terraform validate; then
                    log_info "‚úÖ Ambiente $env_name validado correctamente"
                else
                    log_error "‚ùå Validaci√≥n fall√≥ en ambiente $env_name"
                    exit 1
                fi
            else
                log_error "‚ùå No se pudo inicializar ambiente $env_name"
                exit 1
            fi
            cd - > /dev/null
        fi
    done
}

# 3. Checkov Security Scan
checkov_scan() {
    log_info "üîí Ejecutando Checkov security scan..."
    cd $TERRAFORM_DIR
    
    mkdir -p results
    
    if [ -f "$CHECKOV_CONFIG" ]; then
        log_info "Usando configuraci√≥n personalizada de Checkov"
        checkov -d . --config-file $CHECKOV_CONFIG --output cli --output junitxml --output-file-path ./results
    else
        log_info "Usando configuraci√≥n por defecto de Checkov"
        checkov -d . --output cli --output junitxml --output-file-path ./results
    fi
    
    if [ $? -eq 0 ]; then
        log_info "‚úÖ Scan de seguridad completado sin problemas cr√≠ticos"
    else
        log_warn "‚ö†Ô∏è  Se encontraron problemas de seguridad (revisar resultados)"
    fi
}

# 4. An√°lisis de estructura
analyze_structure() {
    log_info "üì¶ Analizando estructura del proyecto..."
    cd $TERRAFORM_DIR
    
    echo "M√≥dulos encontrados:"
    find modules -name "*.tf" -type f | wc -l
    
    echo "Ambientes disponibles:"
    ls -la environments/
    
    echo "Archivos de configuraci√≥n:"
    find . -name "*.tf" -type f | head -10
}

# Funci√≥n principal
main() {
    log_info "üöÄ Iniciando validaci√≥n completa para ambiente: $ENVIRONMENT"
    
    check_tools
    terraform_format
    terraform_validate
    checkov_scan
    analyze_structure
    
    log_info "üéâ Validaci√≥n completada exitosamente"
}

# Ejecutar funci√≥n principal
main 